# Create a new GitHub release when tags are pushed to the repository
name: Create Release Artifacts

on:
  workflow_run:
    workflows: [PUBLISH] # Ensure this matches the name in publish-release.yml
    types:
      - completed
    # branches: [stem] # Commented out because `github.event.workflow_run.head_branch` picks latest tag(v*.*.*) as HEAD branch

jobs:
  tagged-release:
    name: "Collect Release Artifacts"
    runs-on: "ubuntu-latest"

    steps:
      # Debugging step: Log event details
      # - name: Log event details
      #   run: |
      #     echo "Event name: ${{ github.event_name }}"
      #     echo "Workflow name: ${{ github.event.workflow_run.name }}"
      #     echo "Branch: ${{ github.event.workflow_run.head_branch }}"
      #     echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"

      # Step 1: Halt if the dependent workflow failed
      - name: Halt if dependent workflow failed
        if: ${{ github.event.workflow_run.conclusion != 'success' }}
        run: |
          echo "Dependent workflow failed. Exiting..."
          exit 128

      # Step 2: Check out the code at the correct tag
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensures all tags are fetched
          ref: ${{ github.event.workflow_run.head_branch }}

      # Step 3: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      # Step 4: Install Dependencies
      - name: Install Dependencies
        run: npm ci

      # Step 5: Build
      - name: Build
        run: npm run build

      # Step 6: Generate Release Notes
      - name: Generate Release Notes
        id: notes
        run: |
          echo "## What's Changed" > release-notes.md
          echo >> release-notes.md
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s ([#%h](https://github.com/${{ github.repository }}/commit/%H)) by @%an" >> release-notes.md
          echo >> release-notes.md

      # Step 7: Create GitHub Release
      # - name: Create Release
      #   uses: marvinpinto/action-automatic-releases@latest
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     automatic_release_tag: ${{ github.event.workflow_run.head_branch }}
      #     prerelease: false
      #     title: Release ${{ github.event.workflow_run.head_branch }}
      #     files: |
      #       LICENSE
      #       *.md

      # Step 7: Upload Release Notes and Artifacts
      - name: Upload Release Notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes-${{ github.event.workflow_run.head_branch }}
          path: |
            release-notes.md
            release-notes.txt

      # Step 8: Update Existing Release with Release Notes
      - name: Update Existing Release
        run: |
          echo "Checking if release for tag '${{ github.event.workflow_run.head_branch }}' exists..."
          if gh release view ${{ github.event.workflow_run.head_branch }} > /dev/null 2>&1; then
            echo "Release found. Updating release notes..."
            gh release edit ${{ github.event.workflow_run.head_branch }} --notes-file release-notes.md
          else
            echo "No release found for tag '${{ github.event.workflow_run.head_branch }}'. Skipping update."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
